{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial 4: Choosing the Right Model and Estimator\n",
    "\n",
    "So far, we've learned how to prepare our data and optimize processing parameters like `window_size`. Now, we need to look inside the 'black box' and understand the two most important choices that determine the success of our MI estimate:\n",
    "\n",
    "1.  **The Critic Architecture**: The neural network that *compares* the data from X and Y.\n",
    "2.  **The MI Estimator**: The loss function that *trains* the critic.\n",
    "\n",
    "Getting these right is key to capturing the true nature of the relationship in your data. This tutorial will provide the intuition and practical examples to guide your choices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import numpy as np\n",
    "import neural_mi as nmi\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from torch.nn import Sequential, Linear, Softplus\n",
    "\n",
    "sns.set_context(\"talk\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 1: Choosing the Critic Architecture\n",
    "\n",
    "Think of the critic's job as being a sophisticated comparison function, `f(x, y)`. The complexity of this function determines the kinds of relationships the model can find. `NeuralMI` provides three main critic types, each with a different balance of computational cost and expressive power."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| Critic Type | How it Works | Power | Cost | Use Case |\n",
    "| :--- | :--- | :--- | :--- | :--- |\n",
    "| **`SeparableCritic`** | Compares embeddings with a simple dot product: `g(x) • h(y)`. | Low | Low | **Default choice.** Fast and effective for most relationships. |\n",
    "| **`BilinearCritic`** | Uses a learnable matrix to compare embeddings: `g(x)ᵀ W h(y)`. | Medium | Medium | Good for more complex relationships, like rotations, without a huge speed penalty. |\n",
    "| **`ConcatCritic`** | Concatenates inputs `[x, y]` into a single powerful network `f(x, y)`. | High | High | The most powerful, but can be very slow. Use when other critics fail. |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Test: The Rotated Manifold Problem\n",
    "\n",
    "To see the difference, we'll create a special dataset. We'll generate a high-dimensional `X` from a latent variable `Z`, and a high-dimensional `Y` from a **rotated** version of `Z`. A simple `SeparableCritic` (dot product) will struggle to see that these are related, but the more powerful critics should succeed. Also note that MI here is bounded by the entropy of `Z` (`I(X;Y)~I(Z;Z)~H(Z)`) which can be infinte. Thus, we are not interested in the exact value of MI, but rather the trends. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Create the shared latent variable Z\n",
    "n_samples = 5000\n",
    "z = torch.randn(n_samples, 2)\n",
    "\n",
    "# 2. Create a 45-degree rotation matrix for Y's latent variable\n",
    "angle = np.pi / 4\n",
    "rotation_matrix = torch.tensor([[np.cos(angle), -np.sin(angle)], [np.sin(angle), np.cos(angle)]], dtype=torch.float32)\n",
    "z_rotated = z @ rotation_matrix\n",
    "\n",
    "# 3. Create nonlinear mappings from latent to a high-dimensional observed space\n",
    "mlp = Sequential(Linear(2, 64), Softplus(), Linear(64, 50))\n",
    "x_raw = mlp(z).T.detach()\n",
    "y_raw = mlp(z_rotated).T.detach()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2025-10-08 02:15:25 - neural_mi - INFO - Starting parameter sweep sequentially (n_workers=1)...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "065da25c39e14e6b861300334e93f8f6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Sequential Sweep Progress:   0%|          | 0/15 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0e0800b7e6ba47efb77e70d706f74f19",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c0:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "efb0dbf7546c4a32b3078ec884db47a0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c1:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "86a2d6e51c4b407fa5b67ce5411e8c39",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c2:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3b17f2f6e8534272acacbcb02625be72",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c3:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7178a901612c41638cd79b71e637b478",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c4:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7607b789f48846a0b0fdc0b9c48b138f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c5:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ae6f6ac606b441f1aac13b1875d7b18f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c6:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "72998f40a9c348a4b7c593a24d0de8b7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c7:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "584de1c13ff942da965063808042ba6a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c8:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fc48bc9ec0b44829ba81e4205ca212b1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c9:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1c1b0857e8344f1eb60c6366d275f6fe",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c10:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4e35851f25d84bbc963173c9de1964e3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c11:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2b4435291d9547c38492da2ac8b1f543",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c12:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "54da9144d16b450f97f43a68432fbe13",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c13:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ec4a8683f57142fda97a1fae453e6163",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 575a2d20-7306-44e2-b38a-fdef5cfa9c67_c14:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2025-10-08 02:24:47 - neural_mi - INFO - Parameter sweep finished.\n"
     ]
    }
   ],
   "source": [
    "# Now we sweep over the critic types to see which one can solve the task\n",
    "sweep_grid = {\n",
    "    'critic_type': ['separable', 'bilinear', 'concat'],\n",
    "    'run_id': range(5) # Average over 5 runs for stability\n",
    "}\n",
    "\n",
    "base_params = {\n",
    "    'n_epochs': 100, 'learning_rate': 5e-4, 'batch_size': 64,\n",
    "    'patience': 20, 'embedding_dim': 8, 'hidden_dim': 64, 'n_layers': 3\n",
    "}\n",
    "\n",
    "critic_results = nmi.run(\n",
    "    x_data=x_raw, y_data=y_raw,\n",
    "    mode='sweep',\n",
    "    processor_type_x='continuous',\n",
    "    processor_params_x={'window_size': 1},\n",
    "    base_params=base_params,\n",
    "    sweep_grid=sweep_grid,\n",
    "    n_workers=1, # Because concat is very costly, running multiple instances of it together will likely crash the device\n",
    "    random_seed=42\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Result: Sort of a Hierarchy\n",
    "\n",
    "The results might show a hierarchy in power. The `SeparableCritic` finds the lowest MI. The `BilinearCritic` does better, as its learnable matrix `W` can effectively undo the rotation. The `ConcatCritic`, being the most powerful, also succeeds, achieving a slightly higher MI at the cost of being slower."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(data=critic_results.dataframe, x='critic_type', y='mi_mean', capsize=0.1, order=['separable', 'bilinear', 'concat'])\n",
    "plt.title('Critic Performance on the Rotated Manifold Task')\n",
    "plt.ylabel('Estimated MI (bits)')\n",
    "plt.xlabel('Critic Architecture')\n",
    "plt.ylim(bottom=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2: Choosing the MI Estimator\n",
    "\n",
    "The estimator is the loss function used to train the critic. The choice of estimator involves a crucial trade-off between **bias** and **variance**.\n",
    "\n",
    "| Estimator | Bias | Variance | Use Case |\n",
    "| :--- | :--- | :--- | :--- |\n",
    "| **`InfoNCE`** | High (Biased Low) | Low | **Default choice.** Very stable. Excellent for most tasks where the true MI isn't extremely high. |\n",
    "| **`SMILE`** | Low | Medium | Less biased. Use when you suspect the true MI is very high, as it can avoid the artificial ceiling that affects `InfoNCE`. |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Problem: The `InfoNCE` Upper Bound\n",
    "\n",
    "The `InfoNCE` estimator is mathematically bounded by `log(batch_size)`. This means it can never report an MI value higher than this limit. For a batch size of 128, the limit is `log(128) ≈ 4.85` nats or `6.99` bits. If the true MI is higher than this, `InfoNCE` will underestimate it.\n",
    "\n",
    "Let's create a dataset with a known **ground truth MI of 8.0 bits** and see how the two estimators perform."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Running with InfoNCE (default) ---\n",
      "2025-10-08 02:29:00 - neural_mi - INFO - Starting parameter sweep sequentially (n_workers=1)...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "46780c742850471b968fef5777369fcc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Sequential Sweep Progress:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4ce7cb5251e1481ca9ccf5bf9ed8d92f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 45ae83b3-50d4-41e1-a4d6-55441f58de84_c0:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2025-10-08 02:29:13 - neural_mi - INFO - Parameter sweep finished.\n",
      "\n",
      "--- Running with SMILE ---\n",
      "2025-10-08 02:29:13 - neural_mi - INFO - Starting parameter sweep sequentially (n_workers=1)...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4fa278fd5eb143ac923998e00433a154",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Sequential Sweep Progress:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0b9371904e9f41e781150bf751d76064",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run f36d2339-85dc-4d46-8fac-dc8cc83b71e3_c0:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2025-10-08 02:29:39 - neural_mi - INFO - Parameter sweep finished.\n",
      "\n",
      "--- Comparison ---\n",
      "Ground Truth MI:      8.000 bits\n",
      "InfoNCE Limit:          7.000 bits\n",
      "InfoNCE Estimate:       5.795 bits\n",
      "SMILE Estimate:         8.868 bits\n"
     ]
    }
   ],
   "source": [
    "ground_truth_mi = 8.0\n",
    "batch_size = 128\n",
    "infonce_limit_bits = np.log(batch_size) / np.log(2)\n",
    "\n",
    "x_high_mi, y_high_mi = nmi.datasets.generate_correlated_gaussians(\n",
    "    n_samples=10000, dim=20, mi=ground_truth_mi\n",
    ")\n",
    "\n",
    "# Use a powerful model to ensure the estimator is the limiting factor\n",
    "high_mi_params = {\n",
    "    'n_epochs': 100, 'learning_rate': 5e-4, 'batch_size': batch_size,\n",
    "    'patience': 20, 'embedding_dim': 32, 'hidden_dim': 128, 'n_layers': 3\n",
    "}\n",
    "\n",
    "print(\"--- Running with InfoNCE (default) ---\")\n",
    "infonce_results = nmi.run(\n",
    "    x_data=x_high_mi.T, y_data=y_high_mi.T, mode='estimate',\n",
    "    processor_type_x='continuous', processor_params_x={'window_size': 1},\n",
    "    base_params=high_mi_params, estimator='infonce', random_seed=42\n",
    ")\n",
    "\n",
    "print(\"\\n--- Running with SMILE ---\")\n",
    "smile_results = nmi.run(\n",
    "    x_data=x_high_mi.T, y_data=y_high_mi.T, mode='estimate',\n",
    "    processor_type_x='continuous', processor_params_x={'window_size': 1},\n",
    "    base_params=high_mi_params, estimator='smile', estimator_params={'clip': 5}, random_seed=42\n",
    ")\n",
    "\n",
    "print(\"\\n--- Comparison ---\")\n",
    "print(f\"Ground Truth MI:      {ground_truth_mi:.3f} bits\")\n",
    "print(f\"InfoNCE Limit:          {infonce_limit_bits:.3f} bits\")\n",
    "print(f\"InfoNCE Estimate:       {infonce_results.mi_estimate:.3f} bits\")\n",
    "print(f\"SMILE Estimate:         {smile_results.mi_estimate:.3f} bits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The results are interesting: `InfoNCE` approaches its artificial ceiling and underestimates the true MI. `SMILE`, being less biased, provides a higher -and noiser- estimate. This is why `SMILE` is the recommended choice for `mode='dimensionality'`, where we don't care that much about the exact value of MI, rather its trend, and the internal information can be very high.\n",
    "\n",
    "This result then should invite us to rethink the difference between the critics we noticed earlier, is it a *true* saturation, or an artifact of `InfoNCE`?\n",
    "\n",
    "### Critic Architecture, Revisited:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2025-10-08 03:08:04 - neural_mi - INFO - Starting parameter sweep sequentially (n_workers=1)...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "83a3143ae14644cab0218e843e5a447a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Sequential Sweep Progress:   0%|          | 0/15 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "22289bedef7546e8a7f8b31e9709f66d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c0:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b937abd2dbaf4f0ba7b806985547931f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c1:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "41216b466bdb4b51b896e7b224e4f694",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c2:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5b92cd5ad0524a0297c26a8c1d7d00d1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c3:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "aa8c6ecdb99a49ac9e2c7c22670a65c2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c4:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "72a636d42e6746c4bd179e6b3c7e74b7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c5:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ac3af02c0dfd43c4a4c99492c5169b77",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c6:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3eedf40a8de5414a9b73138b256be7b9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c7:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "50ee4e44b73848a1b5e1430ac9e024ea",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c8:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7341f888b24a48199eb37089eed5a5e2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c9:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "45460a4a71b549b68b0cfa9d8b9af4e1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c10:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "27efb6a18e7849fe978ccc50151349dd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c11:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b44e6c9cc69941fc9d24522e5b6ebe6e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c12:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e6606c6de07845da902088c6573ba9d7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c13:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0087336ff0584a2a9ff18a24b2e44900",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Run 435322e3-f56e-4977-b640-96d62dfc6493_c14:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2025-10-08 03:15:22 - neural_mi - INFO - Parameter sweep finished.\n"
     ]
    }
   ],
   "source": [
    "critic_results_smile = nmi.run(\n",
    "    x_data=x_raw, y_data=y_raw,\n",
    "    mode='sweep',\n",
    "    processor_type_x='continuous',\n",
    "    processor_params_x={'window_size': 1},\n",
    "    estimator='smile', estimator_params={'clip': 5},\n",
    "    base_params=base_params,\n",
    "    sweep_grid=sweep_grid,\n",
    "    n_workers=1, # Because concat is very costly, running multiple instances of it together will likely crash the device\n",
    "    random_seed=42\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 2, figsize=(14, 6), sharey=True)\n",
    "\n",
    "sns.barplot(\n",
    "    data=critic_results.dataframe,\n",
    "    x='critic_type',\n",
    "    y='mi_mean',\n",
    "    capsize=0.1,\n",
    "    order=['separable', 'bilinear', 'concat'],\n",
    "    ax=axes[0]\n",
    ")\n",
    "axes[0].set_title('InfoNCE')\n",
    "axes[0].set_ylabel('Estimated MI (bits)')\n",
    "axes[0].set_xlabel('Critic Architecture')\n",
    "axes[0].set_ylim(bottom=0)\n",
    "\n",
    "sns.barplot(\n",
    "    data=critic_results_smile.dataframe,\n",
    "    x='critic_type',\n",
    "    y='mi_mean',\n",
    "    capsize=0.1,\n",
    "    order=['separable', 'bilinear', 'concat'],\n",
    "    ax=axes[1],\n",
    "    color='red'\n",
    ")\n",
    "axes[1].set_title('SMILE')\n",
    "axes[1].set_xlabel('Critic Architecture')\n",
    "axes[1].set_ylim(-0.1, 1.2*critic_results_smile.dataframe.mi_mean.max())\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The New Result: A Clear Hierarchy\n",
    "\n",
    "The new results show a clear hierarchy in power. The `SeparableCritic` finds the lowest MI. The `BilinearCritic` does better, as its learnable matrix `W` can effectively undo the rotation. The `ConcatCritic`, being the most powerful, also succeeds, achieving a significantly higher MI at the cost of being slower."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion and Recommendations\n",
    "\n",
    "Choosing the right architecture and estimator is a trade-off. Here's a simple guide to get started:\n",
    "\n",
    "> **Recommendation:** Always start with the default: a **`SeparableCritic`** and the **`InfoNCE`** estimator. This combination is fast, stable, and works for a wide variety of problems.\n",
    "\n",
    "- If you have reason to suspect a complex, non-linear relationship (like a rotation or other geometric transformation), try the **`BilinearCritic`**. It offers a significant power boost without the high cost of the `ConcatCritic`.\n",
    "\n",
    "- If you are estimating the internal dimensionality of a system (`mode='dimensionality'`) or have other reasons to believe the true MI is very high, switch to the **`SMILE`** estimator to get a less biased result.\n",
    "\n",
    "With these guidelines, you are now equipped to make informed decisions about the core components of your MI analysis. In the next tutorial, we will tackle the final and most important step for scientific rigor: correcting for finite-sampling bias to get a statstically sound result.\n",
    "\n",
    "*A note*: While the theoretical bound of `InfoNCE` is `log(batch_size)`, this is the case during the *training*. i.e., we should never see an MI value when we're training the estimator that exceeds this bound. However, when evaluating on the whole dataset, the MI value can be bigger, as now the batch size is bigger."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
